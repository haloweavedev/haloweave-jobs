generator client {
  provider        = "prisma-client-js"
<<<<<<< HEAD
  binaryTargets   = ["native", "rhel-openssl-3.0.x"]
=======
>>>>>>> 151091a0706f49f4ee78b04a45698e47eaafd7a8
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String           @id @default(cuid())
  clerkId           String           @unique
  email             String           @unique
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  gmailSynced       Boolean          @default(false)
  gmailToken        String?
  gmailRefreshToken String?
  lastSyncTime      DateTime?
  emails            Email[]
  jobApplications   JobApplication[]
  resumeText        String?          @db.Text // Field for storing plain text resumes
  resumeAnalysis    Json?            // Field for storing structured JSON analysis
}

model Email {
  id            String   @id @default(cuid())
  userId        String
  messageId     String   @unique
  threadId      String
  from          String
  to            String[]
  subject       String
  snippet       String
  body          String   @db.Text
  sentDate      DateTime
  receivedDate  DateTime?
  labels        String[]
  user          User     @relation(fields: [userId], references: [id])
  jobApplication JobApplication?
}

model JobApplication {
  id               String            @id @default(cuid())
  userId           String
  emailId          String            @unique
  company          String
  jobTitle         String?
  status           ApplicationStatus @default(APPLIED)
  appliedDate      DateTime
  lastResponseDate DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  user             User              @relation(fields: [userId], references: [id])
  email            Email             @relation(fields: [emailId], references: [id])
}

enum ApplicationStatus {
  APPLIED
  RESPONSE_RECEIVED
  INTERVIEW_SCHEDULED
  OFFER_RECEIVED
  REJECTED
  ACCEPTED
}